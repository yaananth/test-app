name: CI

on:
  pull_request:
  push:
    

jobs:
  brakeman:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: bundle-ruby-${{ runner.os }}-${{ hashFiles('.ruby-version') }}-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: bundle-ruby-${{ runner.os }}-${{ hashFiles('.ruby-version') }}-
      - name: Install dependencies
        run: |
          bundle config deployment true
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          yarn install
      - name: Run Brakeman
        run: |
          bundle exec brakeman --no-pager --format markdown --github-repo netnodes/doorguard

  rubocop:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: bundle-ruby-${{ runner.os }}-${{ hashFiles('.ruby-version') }}-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: bundle-ruby-${{ runner.os }}-${{ hashFiles('.ruby-version') }}-
      - name: Install dependencies
        run: |
          bundle config deployment true
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          yarn install
      - name: Run Rubocop
        run: |
          bundle exec rubocop

  rspec:
    services:
      postgres:
        image: postgres:11
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: bundle-ruby-${{ runner.os }}-${{ hashFiles('.ruby-version') }}-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: bundle-ruby-${{ runner.os }}-${{ hashFiles('.ruby-version') }}-
      - name: Install dependencies
        run: |
          bundle config deployment true
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          yarn install
      - name: Prepare database
        env:
          RAILS_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testapp_test
        run: |
          bundle exec rake db:create
          bundle exec rake db:schema:load
          bundle exec rake db:test:prepare
      - name: Run RSpec
        env:
          RAILS_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testapp_test
        run: |
          bundle exec rspec
